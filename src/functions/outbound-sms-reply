exports.handler = function(context, event, callback) {

	let client = context.getTwilioClient();

	const to = event.To;
	const from = event.From;

	const response = new Twilio.Response();
    response.appendHeader('Access-Control-Allow-Origin', '*');
    response.appendHeader('Access-Control-Allow-Methods', 'OPTIONS POST');
    response.appendHeader('Content-Type', 'application/json');
    response.appendHeader('Access-Control-Allow-Headers', 'Content-Type');

	client.chat.services(context.TWILIO_CHAT_SERVICE_SID)
	    .channels(event.Channel)
	    .fetch()
	    .then(channel => {
	        if (channel.messages_count == 1) { //need to flip this statement for production
	            callback(null);
	        } else {

	            /*Get the last message*/
	            client.messages.list({
	                dateSent: new Date(Date.now() - 86400 * 1000).toISOString(),
	                from: to, //need to flip these values, because we are looking for the outgoing messages
	                to: from
	            })
	            .then(messages => {
                    const body1 = messages[0].body;
                    const date1 = messages[0].dateCreated;
                    const messageSid1 = messages[0].sid;

                    const attributes = {
                        "inbound-chat-channel.ignore-message": true,
                        "proxied": true
                    };

                    /*Get the reply*/
                    client.chat.services(context.TWILIO_CHAT_SERVICE_SID)
                        .channels(event.Channel)
                        .messages
                        .list()
                        .then(messages => {
                            const body2 = messages[0].body;
                            const date2 = messages[0].dateCreated;
                            const messageSid2 = messages[0].sid;
                            const from2 = messages[0].from;

                            /*Delete the reply*/
                            client.chat.services(context.TWILIO_CHAT_SERVICE_SID)
                                .channels(event.Channel)
                                .messages(messageSid2)
                                .remove()
                                .then(message => {

                                    /*Send the first message again so it appears in the conversation history*/
                                    client.chat.services(context.TWILIO_CHAT_SERVICE_SID)
                                       .channels(event.Channel)
                                       .messages
                                       .create({
                                           body: body1,
                                           dateCreated: date1,
                                           dateUpdated: date1,
                                           from: to,
                                           attributes: JSON.stringify(attributes)
                                       })
                                       .then(message => {

                                            /*Resend the reply*/
                                            client.chat.services(context.TWILIO_CHAT_SERVICE_SID)
                                            .channels(event.Channel)
                                            .messages
                                            .create({
                                               body: body2,
                                               dateCreated: date2,
                                               dateUpdated: date2,
                                               from: from2,
                                               attributes: JSON.stringify(attributes)
                                            })
                                           .then(message => {

                                               client.sync.services(context.TWILIO_SYNC_SID)
                                               .syncMaps(context.TWILIO_SYNC_MAP)
                                               .syncMapItems(messageSid1)
                                               .fetch()
                                               .then(sync_map_item => {
                                                   console.log(sync_map_item.data.worker);

                                                   response.body = {
                                                       "targetWorker": sync_map_item.data.worker
                                                   };

                                                   console.log(response);

                                                   callback(null, response);
                                                })
                                               .done();
                                           })
                                           .done();
                                        })
                                       .done();
                                });
                        });
	            });
	        }
	    })
	    .catch(err => console.log(err));
};
